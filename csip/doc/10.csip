# source
Parser generators and parser combinators are wrong
abstractions for describing programming language syntax.

Operator precedence relations are better:

- easier to read and write
- lots of unintuitive grammars are ruled out
  (like operators with context depedent precedence)
- simple generic parsing and pretty printing algorithms
- generic error messages (acceptable quality)
- local parsability

Unsurprisingly, user definable sub-languages are given by
operators in Haskell, ML, Prolog, Scala, Agda, Coq, Isabelle.

Let's describe the whole language with (mixfix) operators!

                                     let_in_
                                       /    \
      let a = b + c in d             _=_     d
                                    /   \
                                   a    _+_
                                       /   \
                                      b     c
