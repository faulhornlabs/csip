# stage

// builtins
Ty   : Type
Code : Ty -> Type
Arr  : Ty -> Ty -> Ty
Lam  : {a b} -> (Code a -> Code b) -> Code (Arr a b)
App  : {a b} -> Code (Arr a b) -> Code a -> Code b
Let  : {a b} -> Code a -> (Code a -> Code b) -> Code b
Succ : Nat -> Nat
// end of builtins

Parity : Type
Even : Parity
Odd  : Parity

Half : Type
MkHalf : Parity -> Nat -> Half

half : Nat -> Half
half 0 = MkHalf Even 0
half 1 = MkHalf Odd  0
half (Succ (Succ (half --> MkHalf p n))) = MkHalf p (Succ n)

// object code types and functions (foreign function interface)
Int :: Type
One :: Int
Mul :: Int -> Int -> Int
Add :: Int -> Int -> Int

sqr : Code Int -> Code Int
    = \a -> (b := a; Mul b b)

(+) = Add

(^) : Code Int -> Nat -> Code Int
a ^ 1 = a
a ^ 0 = One
a ^ (half --> MkHalf Even k) =                 sqr (a ^ k)
a ^ (half --> MkHalf Odd  k) = (c := a; Mul c (sqr (c ^ k)))

\a b -> ((a + b)^5 + b)^10
