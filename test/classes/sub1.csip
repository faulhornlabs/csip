# elab
# eval

data Nat : Type where

builtin AddNat : Nat -> Nat -> Nat

lookupDict : (a : Type) -> a

data SuperClassList : (a : Type) -> Type where
  SuperClassNil  : (a : Type) -> SuperClassList a
  SuperClassCons : (a : Type) -> (b : Type) -> (a -> b) -> SuperClassList a -> SuperClassList a

supers : (a : Type) -> SuperClassList a

data Num : Type -> Type where
  MkNum : {a} -> (a -> a) -> Num a

supers (Num a) = SuperClassNil _

double : {a} -> Num a => a -> a
double {a} {MkNum f} x = f x

data Num2 : Type -> Type where
  MkNum2 : {a} -> Num a -> Num2 a

selNum2Num : {a} -> Num2 a -> Num a
selNum2Num (MkNum2 d) = d
supers (Num2 a) = SuperClassCons _ _ selNum2Num (SuperClassNil _)

numDict = MkNum \n -> AddNat n n
lookupDict (Num Nat) = numDict

num2Dict = MkNum2 numDict
lookupDict (Num2 Nat) = num2Dict

data N : Type where
  Z : N
  S : N -> N

selTy : {a} -> N -> SuperClassList a -> Type
selTy Z (SuperClassCons _ t _ _) = t
selTy (S i) (SuperClassCons _ _ _ l) = selTy i l

sel : {a} -> (i : N) -> (l : SuperClassList a) -> a -> selTy i l
sel Z (SuperClassCons _ _ f _) = f
sel (S i) (SuperClassCons _ _ _ l) = sel i l

double2 : {a} -> Num2 a => a -> a
double2 {a} {d} x = double {a} {sel Z (supers (Num2 a)) d} x

\{a} {b} c -> double2 {a} {b} c
--double2 4
