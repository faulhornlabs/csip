# elab
# eval

import Prelude

class {m : Type ~> Type} -> Functor m  where
  (<$>) : (a -> b) -> m a -> m b

class Functor m => Applicative m  where
  pure  : a -> m a
  (<*>) : m (a -> b) -> m a -> m b

class Applicative m => Monad m where
  join : m (m a) -> m a


(>>=) : Monad m => m a -> (a -> m b) -> m b
ma >>= f = join (f <$> ma)


-- Maybe monad

data Maybe : Type ~> Type where
  Nothing : Maybe a
  Just    : a -> Maybe a

instance Functor Maybe where
  f <$> Nothing  = Nothing
  f <$> Just a   = Just (f a)

instance Applicative Maybe where
  pure x = Just x

  Just f <*> Just a = Just (f a)
  _      <*> _      = Nothing

instance Monad Maybe where
  join (Just a) = a
  join Nothing = Nothing


-- List monad

data List : Type ~> Type where
  Nil    : List a
  Cons  : a -> List a -> List a

instance Functor List where
  f <$> Nil = Nil
  f <$> Cons x xs = Cons (f x) (f <$> xs)

append : List a -> List a -> List a
append Nil xs = xs
append (Cons x xs) ys = Cons x (append xs ys)

joinList : List (List a) -> List a
joinList Nil = Nil
joinList (Cons x xs) = append x (joinList xs)

instance Applicative List where
  pure x = Cons x Nil

  fs <*> xs = joinList ((\f -> f <$> xs) <$> fs)

instance Monad List where
  join = joinList


guard : Bool -> List Unit
guard True = pure TT
guard False = Nil

enum : Word -> Word -> List Word
enum a 0 = Nil
enum a (WSuc b) = Cons a (enum (1 + a) b)

pita : Word -> List (Tuple3 Word Word Word)
pita n = do
  m <- enum 1 n
  k <- enum 1 m
  l <- enum 1 k
  guard (m*m == k*k + l*l)
  pure (T3 m k l)

-- join (Just (Just 1))
-- the (Maybe Word) (join (Just Nothing))
-- the (Maybe Word) (join Nothing)

pita 20
