# elab
# eval

import Prelude

class {m : Type ~> Type} -> Functor m  where
  fmap : (a -> b) -> m a -> m b

(<$>) = fmap

class Functor m => Applicative m  where
  pure : a -> m a
  app  : m (a -> b) -> m a -> m b

(<*>) = app

class Applicative m => Monad m where
  join : m (m a) -> m a


(>>=) : Monad m => m a -> (a -> m b) -> m b
ma >>= f = join (f <$> ma)


// Maybe monad

data Maybe : Type ~> Type where
  Nothing : Maybe a
  Just    : a -> Maybe a

instance Functor Maybe where
  fmap' f Nothing  = Nothing
  fmap' f (Just a) = Just (f a)

instance Applicative Maybe where
  pure' x = Just x

  app' (Just f) (Just a) = Just (f a)
  app' _        _        = Nothing

instance Monad Maybe where
  join' (Just a) = a
  join' Nothing = Nothing


// List monad

data List : Type ~> Type where
  Nil    : List a
  LCons  : a -> List a -> List a

instance Functor List where
  fmap' f Nil = Nil
  fmap' f (LCons x xs) = LCons (f x) (fmap' f xs)

append : List a -> List a -> List a
append Nil xs = xs
append (LCons x xs) ys = LCons x (append xs ys)

joinList : List (List a) -> List a
joinList Nil = Nil
joinList (LCons x xs) = append x (joinList xs)

instance Applicative List where
  pure' x = LCons x Nil

  app' fs xs = joinList (fmap' (\f -> fmap f xs) fs)

instance Monad List where
  join' = joinList


guard : Bool -> List Unit
guard True = pure TT
guard False = Nil

enum : Nat -> Nat -> List Nat
enum a 0 = Nil
enum a (Succ b) = LCons a (enum (1 + a) b)

pita : Nat -> List (Tuple3 Nat Nat Nat)
pita n = do
  m <- enum 1 n
  k <- enum 1 m
  l <- enum 1 k
  guard (m*m == k*k + l*l)
  pure (T3 m k l)

// join (Just (Just 1))
// the (Maybe Nat) (join (Just Nothing))
// the (Maybe Nat) (join Nothing)

pita 20
