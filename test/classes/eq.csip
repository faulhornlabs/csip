# elab
# eval

import Builtins

(&&) : Bool -> Bool -> Bool
True && a = a
_    && _ = False

not : Bool -> Bool
not True = False
not False = True

class {a : Type} -> Eq a where
  (==) : a -> a -> Bool

(/=) : Eq a => a -> a -> Bool
a /= b = not (a == b)


instance Eq Nat where
  a == b = EqNat a b  -- TODO: (==) = EqNat


data List : Type -> Type where
  Nil  : List a
  (::) : a -> List a -> List a

-- TODO
--instance Eq a => Eq (List a)  where
--  Nil     == Nil      = True
--  x :: xs == y :: ys) = x == y && xs == ys
--  _       == _        = False

eqList : Eq a => List a -> List a -> Bool
eqList Nil       Nil       = True
eqList (x :: xs) (y :: ys) = x == y && eqList xs ys
eqList _         _         = False

instance Eq a => Eq (List a)  where
  (==) = eqList


main =
      (1 :: Nil) :: Nil  ==  (1 :: Nil) :: Nil
  &&  (2 :: Nil) :: Nil  /=  (1 :: Nil) :: Nil
  &&         Nil :: Nil  /=  (1 :: Nil) :: Nil
  &&                Nil  /=  (1 :: Nil) :: Nil

main

