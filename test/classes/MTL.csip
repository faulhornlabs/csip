# elab
# eval

import Prelude

class Functor (m : Type ~> Type)  where
  (<$>) : (a -> b) -> m a -> m b

(<&>) : Functor m => m a -> (a -> b) -> m b
m <&> f = f <$> m

class Functor m => Applicative m  where
  pure  : a -> m a
  (<*>) : m (a -> b) -> m a -> m b

class Applicative m => Monad m where
  join : m (m a) -> m a


(>>=) : Monad m => m a -> (a -> m b) -> m b
ma >>= f = join (f <$> ma)


class Monad m => MonadFail m where
  fail : String -> m a


stateType : (Type ~> Type) -> Type

class Monad m => MonadState m where
  state : (stateType m -> Tuple2 a (stateType m)) -> m a

get : MonadState m => m (stateType m)
get = state \s -> T2 s s

put : MonadState m => stateType m -> m Unit
put s = state \_ -> T2 TT s


class MonadTrans (t : (Type ~> Type) ~> Type ~> Type) where
  lift : Monad m => {a} -> m a -> t m a



instance Functor Maybe where
  f <$> Nothing  = Nothing
  f <$> Just a   = Just (f a)

instance Applicative Maybe where
  pure x = Just x

  Just f <*> Just a = Just (f a)
  _      <*> _      = Nothing

instance Monad Maybe where
  join (Just a) = a
  join Nothing = Nothing

instance MonadFail Maybe where
  fail s = Nothing




data Identity : Type ~> Type where
  MkIdentity : a -> Identity a

runIdentity : Identity a -> a
runIdentity (MkIdentity x) = x

instance Functor Identity where
  f <$> MkIdentity a = MkIdentity (f a)

instance Applicative Identity where
  pure x = MkIdentity x
  MkIdentity f <*> MkIdentity x = MkIdentity (f x)

instance Monad Identity where
  join (MkIdentity a) = a



instance Functor List where
  f <$> Nil = Nil
  f <$> Cons x xs = Cons (f x) (f <$> xs)

append : List a -> List a -> List a
append Nil xs = xs
append (Cons x xs) ys = Cons x (append xs ys)

joinList : List (List a) -> List a
joinList Nil = Nil
joinList (Cons x xs) = append x (joinList xs)

instance Applicative List where
  pure x = Cons x Nil

  fs <*> xs = joinList (fs <&> \f -> f <$> xs)

instance Monad List where
  join = joinList

instance MonadFail List where
  fail s = Nil



matchT2 : (a -> b -> c) -> Tuple2 a b -> c
matchT2 f (T2 a b) = f a b

data StateT : Type ~> (Type ~> Type) ~> Type ~> Type where
  MkStateT : {m : Type ~> Type} -> (s -> m (Tuple2 a s)) -> StateT s m a

runStateT : StateT s m a -> s -> m (Tuple2 a s)
runStateT (MkStateT f) = f

instance Functor m => Functor (StateT s m) where
  f <$> MkStateT g = MkStateT \x -> g x <&> matchT2 \y s -> T2 (f y) s

instance Monad m => Applicative (StateT s m) where
  pure x = MkStateT \s -> pure (T2 x s)
  MkStateT f <*> MkStateT a
    = MkStateT \s -> f s >>= matchT2 \g s -> a s <&> matchT2 \x s -> T2 (g x) s

instance Monad m => Monad (StateT s m) where
  join (MkStateT m) = MkStateT \s -> m s >>= matchT2 runStateT

-- TODO:  stateType (StateT s m) = s
stateType (Ap (Ap StateT s) m) = s

instance Monad m => MonadState (StateT s m) where
  state f = MkStateT \s -> pure (f s)

instance MonadFail m => MonadFail (StateT s m) where
  fail msg = MkStateT \s -> fail msg

instance MonadTrans (StateT s) where
  lift m = MkStateT \s -> m <&> \x -> T2 x s



newId : Monad m => StateT Word m Word
-- TODO:   newId {m} = state {StateT Word m} \s -> T2 s (1 + s)
-- TODO:   newId = state \s -> T2 s (1 + s)
newId = MkStateT \s -> pure (T2 s (1 + s))

sum : Num a => List a -> a
sum Nil = fromWord 0
sum (Cons x xs) = x + sum xs

replicate : Word -> a -> List a
replicate 0 _ = Nil
replicate (WSuc n) a = Cons a (replicate n a)

sequence : Monad m => List (m a) -> m (List a)
sequence Nil = pure Nil
sequence (Cons m ms) = m >>= \x -> Cons x <$> sequence ms

replicateM : Monad m => Word -> m a -> m (List a)
replicateM n m = sequence (replicate n m)

main : StateT Word (StateT Word Identity) Word
  = do
    x <- lift newId <&> (*) 2
    y <- replicateM 3 newId <&> sum
    pure (x + y)

runIdentity (runStateT (runStateT main 1) 1)

