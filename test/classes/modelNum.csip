# elab
# eval

// builtin
instanceOf : (a : Type) -> a


// class Num a  where
//   add : a -> a -> a
Num : Type -> Type
MkNum : {a : Type} -> (a -> a -> a) -> Num a

add : {a : Type} {_ : Num a} -> a -> a -> a
add {_} {MkNum f} = f



N : Type
Z : N
S : N -> N

addN : N -> N -> N
addN Z n = n
addN (S n) m = S (addN n m)

// instance Num N  where
//   add = addN
numN : Num N
numN = MkNum addN

instanceOf (Num N) = numN


N2 : Type
Z2 : N2
AddN2 : N2 -> N2 -> N2

// instance Num N2 where add = addN2
numN2 : Num N2
numN2 = MkNum AddN2

instanceOf (Num N2) = numN2


Wrap : Type -> Type
MkWrap : {a : Type} -> a -> Wrap a

// instance Num a => Num (Wrap a)  where
//    add (MkWrap x) (MkWrap y) = MkWrap (x + y)
addWrap : {a : Type} -> (a -> a -> a) -> Wrap a -> Wrap a -> Wrap a
addWrap f (MkWrap x) (MkWrap y) = MkWrap (f x y)

numWrap : {a : Type} -> Num a -> Num (Wrap a)
numWrap (MkNum f) = MkNum (addWrap f)

instanceOf (Num (Wrap a)) = numWrap (instanceOf (Num a))


// double : Num a => a -> a
double : {a : Type} -> {_ : Num a} -> a -> a
double {_} {d} x = add {_} {d} x x

double {_} {instanceOf _} (MkWrap (MkWrap Z2))
// double (MkWrap (MkWrap Z2))
