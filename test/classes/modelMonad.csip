# elab
# eval

// builtin
lookup : (a : Type) -> a


// class Functor m  where
//   fmap : (a -> b) -> m a -> m b
Functor : (Type -> Type) -> Type
MkFunctor : (m : Type -> Type) -> ((a b : Type) -> (a -> b) -> m a -> m b) -> Functor m

fmap : {m : Type -> Type}{a b : Type} -> Functor m -> (a -> b) -> m a -> m b
fmap {m} {a} {b} (MkFunctor m f) = f a b


// class Functor m => Applicative m  where
//   pure  : a -> m a
//   (<*>) : m (a -> b) -> m a -> m b
Applicative : (Type -> Type) -> Type
MkApplicative : (m : Type -> Type)
  -> Functor m
  -> ((a : Type) -> a -> m a)
  -> ((a b : Type) -> m (a -> b) -> m a -> m b)
  -> Applicative m

pure : {m : Type -> Type}{a : Type} -> Applicative m -> a -> m a
pure {m} {a} (MkApplicative m d p f) = p a

app : {m : Type -> Type}{a b : Type} -> Applicative m -> m (a -> b) -> m a -> m b
app {m} {a} {b} (MkApplicative m d p f) = f a b


// class Applicative m => Monad m where
//   join : m (m a) -> m a
Monad : (Type -> Type) -> Type
MkMonad : (m : Type -> Type) -> Applicative m -> ((a : Type) -> m (m a) -> m a) -> Monad m

join : {m : Type -> Type}{a : Type} -> Monad m -> m (m a) -> m a
join {m} {a} (MkMonad m d f) = f a


Maybe : Type -> Type
Nothing : {a : Type} -> Maybe a
Just : {a : Type} -> a -> Maybe a

// instance Functor (Maybe a) where
//   fmap f Nothing = Nothing
//   fmap f (Just a) = Just (f a)

fmapMaybe : (a b : Type) -> (a -> b) -> Maybe a -> Maybe b
fmapMaybe a b f (Nothing {a}) = Nothing {b}
fmapMaybe a b f (Just {a} x) = Just {b} (f x)

lookup (Functor Maybe) = MkFunctor Maybe fmapMaybe

// instance Applicative (Maybe a) where
//   pure = Just
//   Just f <*> Just a = Just (f a)
//   _ <*> _ = Nothing

pureMaybe : (a : Type) -> a -> Maybe a
pureMaybe a x = Just x

appMaybe : (a b : Type) -> Maybe (a -> b) -> Maybe a -> Maybe b
appMaybe a b f x = Nothing
// appMaybe a b (Just {a -> b} f) (Just {a} x) = Just {b} (f x)   // TODO

lookup (Applicative Maybe) = MkApplicative Maybe (lookup (Functor Maybe)) pureMaybe appMaybe


// instance Monad (Maybe a) where
//   join (Just a) = a
//   join Nothing = Nothing

joinMaybe : (a : Type) -> Maybe (Maybe a) -> Maybe a
joinMaybe a (Just {Maybe a} x) = x
joinMaybe a (Nothing {Maybe a}) = Nothing {a}

lookup (Monad Maybe) = MkMonad Maybe (lookup (Applicative Maybe)) joinMaybe



// fmap2 : Monad m => (a -> b) -> m a -> m b
// fmap2 {d}    // lookup (Monad m) = d; lookup (Applicative m) = d.applDict; lookup (Functor m) = d.applDict.functDict
//    = fmap {lookup _}


Type
