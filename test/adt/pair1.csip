# elab
# eval
# type

data Bool  : Type where
  True  : Bool
  False : Bool

data Sum : (A : Type) -> (A -> Type) -> Type where
  MkSum : {A : Type}{B : A -> Type}(a : A)(b : B a) -> Sum A B

ite : {a : Type} -> a -> a -> Bool -> a
ite t f True  = t
ite t f False = f

either : Type -> Type -> Type = \a b -> Sum _ (ite a b)

left  : {a b : Type} -> a -> either a b
left {a} {b} x = MkSum {_} {ite a b} True  x

right : {a b : Type} -> b -> either a b
right {a} {b} x = MkSum {_} {ite a b} False x

the : (a : Type) -> a -> a = \_ x -> x

the (either Nat String) (left 24)
