# stage
# haskell_stage

import Builtins

data Unit : Ty where
  TT : Unit

data Carry : Ty where
  ClearCarry : Carry
  SetCarry   : Carry

data W64 : Ty where
  Zero64 : W64
  PlusC  : Carry -> W64 -> W64 -> Prod Carry W64


data N : Type where
  Z : N
  S : N -> N

toN : Nat -> N
toN 0 = Z
toN (Succ i) = S (toN i)


vec : N -> Ty -> Ty
vec Z     t = Unit
vec (S n) t = Prod (vec n t) t

addHelper : (n: N) -> Carry -> vec n W64 -> vec n W64 -> Prod Carry (vec n W64)
addHelper Z c a b = Pair c TT
addHelper (S n) c a b = do
  d := PlusC c (Snd a) (Snd b)
  e := addHelper n (Fst d) (Fst a) (Fst b)
  Pair (Fst e) (Pair (Snd e) (Snd d))
/*
addHelper (S n) c (as, a) (bs, b) = do
  (c' , d)  := PlusC c a b
  (c'', ds) := addHelper n c' as bs
  (c'', (ds, d))
*/
add : (n: N) -> vec n W64 -> vec n W64 -> vec n W64
  = \n a b -> Snd (addHelper n ClearCarry a b)

// main
add (toN 3)
