# stage
# haskell_stage

import Builtins

Unit : Ty
TT   : Unit

Carry      : Ty
ClearCarry : Carry
SetCarry   : Carry

W64    : Ty
Zero64 : W64
PlusC  : Carry -> W64 -> W64 -> Prod Carry W64


vec : Nat -> Ty -> Ty
vec  0       t = Unit
vec (Succ n) t = Prod (vec n t) t

addHelper : (n: Nat) -> Carry -> vec n W64 -> vec n W64 -> Prod Carry (vec n W64)
addHelper  0       c a b = Pair c TT
addHelper (Succ n) c a b = do
  d := PlusC c (Snd a) (Snd b)
  e := addHelper n (Fst d) (Fst a) (Fst b)
  Pair (Fst e) (Pair (Snd e) (Snd d))
/*
addHelper (S n) c (as, a) (bs, b) = do
  (c' , d)  := PlusC c a b
  (c'', ds) := addHelper n c' as bs
  (c'', (ds, d))
*/
add : (n: Nat) -> vec n W64 -> vec n W64 -> vec n W64
  = \n a b -> Snd (addHelper n ClearCarry a b)

// main
add 3
