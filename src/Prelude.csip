
import Builtins


appendStr = AppendStr

class Eq (a : Type) where
  (==) : a -> a -> Bool

instance Eq Word where
  a == b = EqWord a b

instance Eq String where
  a == b = EqStr a b


class Num (a : Type) where
  (+)     : a -> a -> a
  (*)     : a -> a -> a
  fromWord : Word -> a

instance Num Word where
  a + b = AddWord a b
  a * b = MulWord a b
  fromWord n = n

even : Word -> Bool
  = \n -> ModWord n 2 == 0
odd  : Word -> Bool
  = \n -> ModWord n 2 == 1

div = DivWord


the : (a : Type) -> a -> a
  = \_ x -> x


data Unit : Type where
  TT : Unit

data Tuple2 : Type -> Type -> Type where
  T2 : a -> b -> Tuple2 a b

first : (a -> b) -> Tuple2 a c -> Tuple2 b c
first f (T2 x y) = T2 (f x) y

second : (a -> b) -> Tuple2 c a -> Tuple2 c b
second f (T2 x y) = T2 x (f y)


data Tuple3 : Type -> Type -> Type -> Type where
  T3 : a -> b -> c -> Tuple3 a b c


data Maybe : Type ~> Type where
  Nothing : Maybe a
  Just    : a -> Maybe a


data List : Type ~> Type where
  Nil    : List a
  Cons  : a -> List a -> List a

