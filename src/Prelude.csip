
import Builtins


natToBool : Nat -> Bool
natToBool 1 = True
natToBool _ = False

appendStr : String -> String -> String
  = \a b -> AppendStr (PairStr a b)

eqStr : String -> String -> Bool
  = \a b -> natToBool (EqStr (PairStr a b))


(==) : Nat -> Nat -> Bool
0      == 0      = True
Succ a == Succ b = a == b
_      == _      = False

(+) : Nat -> Nat -> Nat
0      + m = m
Succ n + m = Succ (n + m)

(*) : Nat -> Nat -> Nat
0      * _ = 0
Succ n * m = m + n * m


the : (a : Type) -> a -> a
  = \_ x -> x


Unit : Type
TT   : Unit

Tuple2 : Type -> Type -> Type
MkTuple2 : {a b} -> a -> b -> Tuple2 a b

Tuple3 : Type -> Type -> Type -> Type
MkTuple3 : {a b c} -> a -> b -> c -> Tuple3 a b c


"end of Prelude"
