
import Builtins


appendStr = AppendStr

class {a : Type} -> Eq a where
  (==) : a -> a -> Bool

instance Eq Nat where
  a == b = EqNat a b

instance Eq String where
  a == b = EqStr a b


class {a : Type} -> Num a where
  (+)     : a -> a -> a
  (*)     : a -> a -> a
  fromNat : Nat -> a

instance Num Nat where
  a + b = AddNat a b
  a * b = MulNat a b
  fromNat n = n

even : Nat -> Bool
  = \n -> ModNat n 2 == 0
odd  : Nat -> Bool
  = \n -> ModNat n 2 == 1

div = DivNat


the : (a : Type) -> a -> a
  = \_ x -> x


data Unit : Type where
  TT : Unit

data Tuple2 : Type -> Type -> Type where
  T2 : a -> b -> Tuple2 a b

first : (a -> b) -> Tuple2 a c -> Tuple2 b c
first f (T2 x y) = T2 (f x) y

second : (a -> b) -> Tuple2 c a -> Tuple2 c b
second f (T2 x y) = T2 x (f y)


data Tuple3 : Type -> Type -> Type -> Type where
  T3 : a -> b -> c -> Tuple3 a b c


data Maybe : Type ~> Type where
  Nothing : Maybe a
  Just    : a -> Maybe a


data List : Type ~> Type where
  Nil    : List a
  LCons  : a -> List a -> List a

