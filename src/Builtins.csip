
-- (~>) is constructor application
constructor Ap : (a ~> b) -> a -> b


-- data types

data Bool : Type where
  True  : Bool
  False : Bool

data Word : Type where

builtin DecWord    : Word -> Word
builtin AddWord    : Word -> Word -> Word
builtin MulWord    : Word -> Word -> Word
builtin ModWord    : Word -> Word -> Word
builtin DivWord    : Word -> Word -> Word
builtin EqWord     : Word -> Word -> Bool

data WSucView : Type where
  WSucOk    : Word -> WSucView
  WSucFail  : WSucView

succView : Word -> WSucView
succView 0 = WSucFail
succView n = WSucOk (DecWord n)

constructor WSuc : Word -> Word

-- pattern WSuc n <- (succView --> WSucOk n)
-- WSuc = \n -> AddWord 1 n


data String : Type where

builtin AppendStr : String -> String -> String
builtin EqStr     : String -> String -> Bool
builtin TakeStr   : Word -> String -> String
builtin DropStr   : Word -> String -> String

data ConsView : Type where
  ConsOk    : String -> String -> ConsView
  ConsFail  : ConsView

consView : String -> ConsView
consView "" = ConsFail
consView n = ConsOk (TakeStr 1 n) (DropStr 1 n)

constructor ConsStr : String -> String -> String
-- pattern ConsStr a b <- (consView --> ConsOk a b)


data Nat : Type where
  Zero : Nat
  Suc  : Nat -> Nat

wordToNat : Word -> Nat
wordToNat 0 = Zero
wordToNat (WSuc i) = Suc (wordToNat i)


-- Object code

data Ty : Type where              -- open data type

data Code : Ty -> Type where      -- open data type

data Arr : Ty -> Ty -> Ty where
  Lam : {a b : Ty} -> (a -> b) -> Arr a b

builtin App : Arr a b -> a -> b
builtin Let : {a b : Ty} -> a -> (a -> b) -> b
builtin TopLet : {a b : Ty} -> a -> a -> b -> b

data Prod : Ty -> Ty -> Ty where
  Pair : {a b : Ty} -> a -> b -> Prod a b

builtin Fst : Prod a b -> a
builtin Snd : Prod a b -> b

data OBool : Ty where
  OTrue  : OBool
  OFalse : OBool

data OString : Ty where
  MkOString : String -> OString

builtin OEqStr : OString -> OString -> OBool

data OWord : Ty where
  MkOWord : Word -> OWord

builtin OEqWord : OWord -> OWord -> OBool


-- Type classes

lookupDict : (a : Type) -> a

data SuperClassList : (a : Type) -> Type where
  SuperClassNil  : (a : Type) -> SuperClassList a
  SuperClassCons : (a : Type) -> (b : Type) -> (a -> b) -> SuperClassList a -> SuperClassList a

superClasses : (a : Type) -> SuperClassList a

