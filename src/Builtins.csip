
Ap : (a ~> b) -> a -> b

data Bool : Type where
  True  : Bool
  False : Bool

data Nat : Type where

DecNat    : Nat -> Nat
AddNat    : Nat -> Nat -> Nat
MulNat    : Nat -> Nat -> Nat
ModNat    : Nat -> Nat -> Nat
DivNat    : Nat -> Nat -> Nat
EqNat     : Nat -> Nat -> Bool

Succ      : Nat -> Nat

data SuccView : Type where
  SuccOk    : Nat -> SuccView
  SuccFail  : SuccView

succView  : Nat -> SuccView
succView 0 = SuccFail
succView n = SuccOk (DecNat n)

data String : Type where

AppendStr : String -> String -> String
EqStr     : String -> String -> Bool
TakeStr   : Nat -> String -> String
DropStr   : Nat -> String -> String

Cons      : String -> String -> String

data ConsView : Type where
  ConsOk    : String -> String -> ConsView
  ConsFail  : ConsView

consView  : String -> ConsView
consView "" = ConsFail
consView n = ConsOk (TakeStr 1 n) (DropStr 1 n)

data Ty : Type where
  Arr       : Ty -> Ty -> Ty
  Prod      : Ty -> Ty -> Ty

data Code : Ty -> Type where
  Lam       : {a b : Ty} -> (a -> b) -> Arr a b
  App       : Arr a b -> a -> b
  Let       : {a b : Ty} -> a -> (a -> b) -> b
  TopLet    : {a b : Ty} -> a -> a -> b -> b
  Pair      : {a b : Ty} -> a -> b -> Prod a b
  Fst       : Prod a b -> a
  Snd       : Prod a b -> b

lookupDict : (a : Type) -> a

SuperClassList : (a : Type) -> Type
SuperClassNil  : (a : Type) -> SuperClassList a
SuperClassCons : (a : Type) -> (b : Type) -> (a -> b) -> SuperClassList a -> SuperClassList a

superClasses : (a : Type) -> SuperClassList a

